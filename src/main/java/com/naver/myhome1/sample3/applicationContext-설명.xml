<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	해당 패키지에서 New -> Other -> Spring Bean Configuration File -> Next 
	-> applicationContext 입력 -> Next -> beans 클릭 -> Finish
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd">

<!-- 
	1. applicationContext.xml은 스프링 환경 설정 파일입니다.
		이곳에서 객체를 생성하기 위한 작업을 진행합니다.
		스프링 환경 설정 파일은 이름은 무엇이든 상관없지만 <beans>를 루트 엘리먼트로 사용합니다.
		<beans> 아래 엘리먼트는 <bean> 엘리먼트를 이용하여 빈에 관한 정의를 기술합니다.
		
	2. 스프링에서는 자바 객체를 bean이라고 부릅니다.
	
	3. 의존성 주입(Dependency Injection : DI) : 
		- 객체 사이의 의존 관계를 자기 자신이 아닌 외부에 의해서 설정된다는 개념으로 
		  의존하는 객체를 직접 생성하지 않고 의존 객체를 전달받는 방식을 사용합니다.
		  
		(1) 생성자를 이용한 주입(constructor DI) : 
			생성자를 통해서 의존 관계를 연결시키는 것으로 생성자를 사용합니다.
			- 생성자 argument가 한 개인 경우
			  <constructor-arg>
			  	<value>Spring</value>
			  </constructor-arg>
			  같은 의미로 
			  <constructor-arg value="Spring" /> 사용합니다.
			
			- 생성자 argument가 두 개인 경우
			  (index 속성을 이용하여 몇 번째 인수에 값을 전달할 것인지를 지정합니다.)
			  <constructor-arg index="0">
			  	<value>Spring</value>
			  </constructor-arg>
			  
			  <constructor-arg index="1">
			  	<value>25</value>
			  </constructor-arg>
			  
		(2) property를 이용한 주입(property DI) :
			클래스의 의존 관계를 연결시키기 위해서 setter 메서드를 이용합니다.
			반드시 프로퍼티 setter 메서드가 있어야 사용 가능합니다. 
			name 속성 : setter 메서드의 프로퍼티 이름
			
			<property name="greeting">
				<value>안녕하세요</value>
			</property>
			같은 의미로
			<property name="greeting" value="안녕하세요!" />
			==> setGreeting() 메서드에 값을 저장합니다.
			
			// 아래 메서드가 존재해야 합니다.
			// property greeting의 setter 메서드를 호출합니다.
			public void setGreeting(String greeting) {
				this.greeting = greeting;
			}  
	
	4. IOC(Inversion of Control: 제어의 역행)
		자신이 사용할 오브젝트를 개발자가 생성하고 의존관계를 연결시키는 등 
		제어권을 개발자가 직접 갖고 있었지만 스프링에서는 객체에 대한 제어권이 컨테이너에게 넘어가면서 
		객체의 생명주기를 관리하는 권한 또한 컨테이너가 전달합니다.
		이처럼 객체의 생성에서부터 생명주기의 관리까지 모든 객체에 대한 제어권이 바뀐 것을 의미합니다. 
		
 -->

	<!-- bean 생성합니다. 
		 class 속성은 클래스를 등록할 때 정확한 패키지 경로와 클래스 이름을 지정해야 합니다. 
	-->
	<bean id="m" class="com.naver.myhome1.sample3.MessageBeanEn" />
	<!-- 자바로 표현하면 다음과 같습니다.
		 import com.naver.myhome1.sample3.MessageBeanEn;
		 MessageBeanEn m = new MessageBeanEn();
	 -->
	
	<bean id="m1" class="com.naver.myhome1.sample3.MessageBeanKo" />
	
</beans>
